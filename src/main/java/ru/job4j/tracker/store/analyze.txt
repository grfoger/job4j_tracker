Всего 3 инструмента анализа профилирования
jmap
позволяет оценить на что идут затраты памяти в текущий момент.
Наиболее затратные процессы относятся к базе.
Далее наиболее часто встречающиеся позиции это String и HashMap что я связываю процессами работы программы.
За время анализа обработанно около 500 строк, а к моменту сбора анализа ещё меньше,
в процессах String и HashMap задейстовано куда больше элементов,
следовательно они не относятся непосредственно к нашим данным.
MemTracker использован один раз, что логично. Item - основной содержатель данных - 42 раза.

jstat
показывает в основном ёмкость молодого и старого раздела памяти и используемое пространство eden.
За время анализа эти показатели не менялись и по сути отражают информацию по аналогии с -Xlog:gc*

jconsole
даёт наиболее полное динамическое представление о задейстовании ресурсов:
Память кучи для моего кода ступенчато увеличивалась, а после завершения програмы резко упала до 0
Количество нитей оставалось примерно одинаковым и так же обнулилось по завершении
Количество задейстованых классов плавно линейно росло в целом следуя за расходом памяти что логично.
Загрузка процессора носила в целом спорадический и не линейный характер в целом находясь около нуля.

Данная небольшая программа не требует большого количества ресурсов. При запуске в более быстром режиме видно
как стремительно потребляется память что вероятно похоже на незакрытые ресурсы программы.

При попытке выйти за границы памяти заметно как резко выросло потребление памяти.
Загрузка процессора в этот момент была порядка 10%
Далее количество используемой памяти перестало расти и стало статичным, но выросла нагрузка на процессор до 70%.
после чего ожидаемая выдача ошибки OutOfMemoryError и соотвественно обрыв соединения с программой.
